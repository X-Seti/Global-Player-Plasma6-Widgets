// X-Seti - Sept 15 2025 - Global Player - FRESH START - Plasma 5
import QtQuick 2.15
import QtQuick.Layouts 1.15
import QtQuick.Controls 2.15
import org.kde.plasma.core 2.0 as PlasmaCore
import org.kde.plasma.components 3.0 as PC3
import org.kde.plasma.plasmoid 2.0

Item {
    id: root

    // Basic state
    property var stationsList: ["Heart UK", "Capital FM", "Classic FM", "Radio X", "LBC"]
    property int currentStationIndex: 0
    property string currentStation: stationsList[currentStationIndex] || "Heart UK"
    property string nowPlaying: "Loading..."
    property string artistName: ""
    property url coverArt: ""
    property bool isPlaying: false
    property bool showLogging: false
    property bool showNotifications: true
    property bool mediaMode: false // false = radio, true = local media
    
    // Song history
    property var playedSongs: []
    
    // Media player state
    property var mediaPlaylist: []
    property int mediaIndex: 0
    property int mediaPosition: 0
    property int mediaDuration: 0

    // Simple functions
    function togglePlay() {
        isPlaying = !isPlaying
        if (showNotifications) {
            showNotification(isPlaying ? "Playing" : "Paused", currentStation)
        }
        console.log("Toggle play:", isPlaying, currentStation)
    }

    function nextStation() {
        currentStationIndex = (currentStationIndex + 1) % stationsList.length
        currentStation = stationsList[currentStationIndex]
        if (showNotifications) {
            showNotification("Station Changed", currentStation)
        }
        console.log("Next station:", currentStation)
    }

    function showNotification(title, text) {
        // Simple KDE notification
        dataSource.connectSource("kdialog --title '" + title + "' --passivepopup '" + text + "' 3")
    }

    function addToHistory(song, artist) {
        var newSong = {
            "time": new Date().toLocaleTimeString(),
            "song": song,
            "artist": artist,
            "station": currentStation
        }
        playedSongs.unshift(newSong)
        if (playedSongs.length > 10) {
            playedSongs.pop()
        }
        playedSongsModel.clear()
        for (var i = 0; i < playedSongs.length; i++) {
            playedSongsModel.append(playedSongs[i])
        }
    }

    function switchMode() {
        mediaMode = !mediaMode
        console.log("Switched to", mediaMode ? "Media Player" : "Radio", "mode")
    }

    // Data source for commands
    PlasmaCore.DataSource {
        id: dataSource
        engine: "executable"
    }

    // Song history model
    ListModel {
        id: playedSongsModel
    }

    // Startup
    Component.onCompleted: {
        console.log("Global Player started - Fresh version")
        addToHistory("Welcome to Global Player", "System")
    }

    // Update timer
    Timer {
        interval: 5000
        running: true
        repeat: true
        onTriggered: {
            // Simulate song updates
            if (isPlaying && !mediaMode) {
                var songs = ["Amazing Song", "Great Track", "Awesome Hit", "Perfect Tune"]
                var artists = ["Cool Artist", "Great Band", "Super Singer", "Mega Star"]
                nowPlaying = songs[Math.floor(Math.random() * songs.length)]
                artistName = artists[Math.floor(Math.random() * artists.length)]
                addToHistory(nowPlaying, artistName)
            }
        }
    }

    // PANEL MODE - Just the cover art icon
    Rectangle {
        visible: plasmoid.formFactor === PlasmaCore.Types.Horizontal || plasmoid.formFactor === PlasmaCore.Types.Vertical
        anchors.fill: parent
        anchors.margins: 2
        radius: 4
        color: "#2a2a2a"
        border.color: isPlaying ? "#4CAF50" : "#666"
        border.width: 2

        // Cover art or music note
        Image {
            anchors.fill: parent
            anchors.margins: 4
            source: coverArt
            fillMode: Image.PreserveAspectFit
            visible: coverArt !== ""
        }

        PC3.Label {
            anchors.centerIn: parent
            text: "♪"
            font.pointSize: 16
            color: "#fff"
            visible: coverArt === ""
        }

        // Click handlers
        MouseArea {
            anchors.fill: parent
            acceptedButtons: Qt.LeftButton | Qt.RightButton
            
            onClicked: function(mouse) {
                if (mouse.button === Qt.LeftButton) {
                    togglePlay()
                } else if (mouse.button === Qt.RightButton) {
                    nextStation()
                }
            }
        }
    }

    // DESKTOP MODE - Full interface
    ColumnLayout {
        visible: !(plasmoid.formFactor === PlasmaCore.Types.Horizontal || plasmoid.formFactor === PlasmaCore.Types.Vertical)
        anchors.fill: parent
        anchors.margins: 16
        spacing: 12

        // Top section - Cover art and station info
        RowLayout {
            Layout.fillWidth: true
            spacing: 16

            // Cover art (left side)
            Rectangle {
                Layout.preferredWidth: 120
                Layout.preferredHeight: 120
                radius: 8
                color: "#2a2a2a"
                border.color: isPlaying ? "#4CAF50" : "#666"
                border.width: 2

                Image {
                    anchors.fill: parent
                    anchors.margins: 8
                    source: coverArt
                    fillMode: Image.PreserveAspectFit
                    visible: coverArt !== ""
                }

                PC3.Label {
                    anchors.centerIn: parent
                    text: "♪"
                    font.pointSize: 32
                    color: "#fff"
                    visible: coverArt === ""
                }
            }

            // Station info and controls
            ColumnLayout {
                Layout.fillWidth: true
                spacing: 8

                // Station name and controls
                RowLayout {
                    Layout.fillWidth: true

                    PC3.Button {
                        text: "◀"
                        onClicked: prevStation()
                        enabled: stationsList.length > 1
                    }

                    PC3.Label {
                        text: mediaMode ? "Media Player" : currentStation
                        font.bold: true
                        font.pointSize: 16
                        Layout.fillWidth: true
                        horizontalAlignment: Text.AlignHCenter
                    }

                    PC3.Button {
                        text: "▶"
                        onClicked: nextStation()
                        enabled: stationsList.length > 1
                    }
                }

                // Now playing info
                PC3.Label {
                    Layout.fillWidth: true
                    text: mediaMode ? "Local Media Playback" : (artistName + " - " + nowPlaying)
                    font.pointSize: 12
                    horizontalAlignment: Text.AlignHCenter
                    wrapMode: Text.WordWrap
                }
            }
        }

        // Options row
        RowLayout {
            Layout.fillWidth: true

            PC3.CheckBox {
                text: "Logging"
                checked: showLogging
                onToggled: showLogging = checked
            }

            PC3.CheckBox {
                text: "Notifications"
                checked: showNotifications
                onToggled: showNotifications = checked
            }

            Item { Layout.fillWidth: true }

            PC3.Button {
                text: mediaMode ? "Radio Mode" : "Media Mode"
                onClicked: switchMode()
            }
        }

        // Song history / Media player area
        Rectangle {
            Layout.fillWidth: true
            Layout.fillHeight: true
            Layout.minimumHeight: 200
            color: "#1a1a1a"
            radius: 8
            border.color: "#444"
            border.width: 1

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 12

                PC3.Label {
                    text: mediaMode ? "Media Player Controls" : "Recently Played Songs"
                    font.bold: true
                    color: "#fff"
                }

                // Radio mode - song history
                ScrollView {
                    visible: !mediaMode
                    Layout.fillWidth: true
                    Layout.fillHeight: true

                    ListView {
                        model: playedSongsModel
                        delegate: RowLayout {
                            width: ListView.view.width
                            spacing: 8

                            PC3.Label {
                                text: model.time || ""
                                color: "#888"
                                font.pointSize: 9
                                Layout.preferredWidth: 60
                            }

                            PC3.Label {
                                text: (model.artist || "") + " - " + (model.song || "")
                                color: "#fff"
                                Layout.fillWidth: true
                                elide: Text.ElideRight
                            }

                            PC3.Label {
                                text: model.station || ""
                                color: "#4CAF50"
                                font.pointSize: 9
                                Layout.preferredWidth: 80
                            }
                        }
                    }
                }

                // Media mode - player controls
                ColumnLayout {
                    visible: mediaMode
                    Layout.fillWidth: true
                    Layout.fillHeight: true

                    PC3.Label {
                        text: "Local MP3/MP4 Player"
                        color: "#fff"
                        horizontalAlignment: Text.AlignHCenter
                        Layout.fillWidth: true
                    }

                    RowLayout {
                        Layout.fillWidth: true
                        Layout.alignment: Qt.AlignHCenter

                        PC3.Button {
                            text: "⏮"
                            onClicked: console.log("Previous track")
                        }

                        PC3.Button {
                            text: isPlaying ? "⏸" : "▶️"
                            onClicked: togglePlay()
                        }

                        PC3.Button {
                            text: "⏭"
                            onClicked: console.log("Next track")
                        }
                    }

                    // Progress bar placeholder
                    Rectangle {
                        Layout.fillWidth: true
                        height: 6
                        color: "#333"
                        radius: 3

                        Rectangle {
                            width: parent.width * 0.3
                            height: parent.height
                            color: "#4CAF50"
                            radius: 3
                        }
                    }

                    RowLayout {
                        Layout.fillWidth: true

                        PC3.Label {
                            text: "2:34"
                            color: "#888"
                            font.pointSize: 9
                        }

                        Item { Layout.fillWidth: true }

                        PC3.Label {
                            text: "4:12"
                            color: "#888"
                            font.pointSize: 9
                        }
                    }

                    PC3.Label {
                        text: "Ready for your media files..."
                        color: "#666"
                        horizontalAlignment: Text.AlignHCenter
                        Layout.fillWidth: true
                        Layout.fillHeight: true
                        verticalAlignment: Text.AlignVCenter
                    }
                }
            }
        }
    }
}