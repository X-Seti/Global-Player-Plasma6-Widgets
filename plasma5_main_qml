// X-Seti - Sept 15 2025 - GlobalPlayer - Plasma 5 Clean Version
import QtQuick 2.15
import QtQuick.Layouts 1.15
import QtQuick.Controls 2.15
import org.kde.plasma.core 2.0 as PlasmaCore
import org.kde.plasma.components 3.0 as PC3
import org.kde.plasma.plasmoid 2.0

Item {
    id: root

    // Version information (console only, no popups)
    readonly property string widgetVersion: "3.2.2"
    readonly property string plasmaVersionDetected: "Plasma 5"

    Plasmoid.toolTipMainText: ""
    Plasmoid.toolTipSubText: ""
    Plasmoid.status: isPlaying ? PlasmaCore.Types.ActiveStatus : PlasmaCore.Types.PassiveStatus
    
    property var stationsModel: []
    property int stationIndex: 0
    property string selectedStation: {
        if (stationsModel.length === 0) return ""
        if (stationIndex < 0 || stationIndex >= stationsModel.length) return ""
        return stationsModel[stationIndex]
    }
    property string nowArtist: ""
    property string nowTitle: ""
    property string nowShow: ""
    property string playState: "Stopped"
    property bool loggingEnabled: false
    property bool pushNotifications: false
    property url artworkUrl: ""
    property string lastNotifiedTrack: ""

    property string displayTitle: {
        if (nowArtist && nowTitle) {
            return nowArtist + " — " + nowTitle
        } else if (nowTitle) {
            return nowTitle
        } else if (selectedStation) {
            return selectedStation
        } else {
            return "Global Player"
        }
    }

    property bool isPlaying: playState === "Playing"

    Plasmoid.switchWidth: PlasmaCore.Units.gridUnit * 20
    Plasmoid.switchHeight: PlasmaCore.Units.gridUnit * 25

    // Console-only logging (no popups)
    function logError(context, error) {
        console.log("GlobalPlayer Error in " + context + ": " + error.toString())
    }

    function sendTrackNotification() {
        try {
            var trackInfo = displayTitle
            if (trackInfo && trackInfo !== "Global Player" && trackInfo !== lastNotifiedTrack) {
                lastNotifiedTrack = trackInfo
                // Simple notification without version spam
                execDS.connectSource("kdialog --title 'Global Player' --passivepopup '" + trackInfo + "' 3")
            }
        } catch (e) {
            logError("sendTrackNotification", e)
        }
    }

    function qdbusCall(method, args) {
        try {
            var cmd = "qdbus org.mooheda.gpd /org/mooheda/gpd org.mooheda.gpd." + method
            if (args && args.length > 0) {
                cmd += " " + args.join(" ")
            }
            execDS.connectSource(cmd)
        } catch (e) {
            logError("qdbusCall(" + method + ")", e)
        }
    }

    function refreshStations() {
        try {
            execDS.connectSource("qdbus org.mooheda.gpd /org/mooheda/gpd org.mooheda.gpd.GetStations")
        } catch (e) {
            logError("refreshStations", e)
        }
    }

    function playCurrent() {
        try {
            if (selectedStation) {
                qdbusCall("PlayStation", ['"' + selectedStation + '"'])
            }
        } catch (e) {
            logError("playCurrent", e)
        }
    }

    function togglePlayPause() {
        try {
            if (isPlaying) {
                qdbusCall("Stop", [])
            } else {
                playCurrent()
            }
        } catch (e) {
            logError("togglePlayPause", e)
        }
    }

    function nextStation() {
        try {
            if (stationsModel.length > 1) {
                stationIndex = (stationIndex + 1) % stationsModel.length
                playCurrent()
            }
        } catch (e) {
            logError("nextStation", e)
        }
    }

    function prevStation() {
        try {
            if (stationsModel.length > 1) {
                stationIndex = (stationIndex - 1 + stationsModel.length) % stationsModel.length
                playCurrent()
            }
        } catch (e) {
            logError("prevStation", e)
        }
    }

    function signIn() {
        try {
            qdbusCall("SignIn", [])
        } catch (e) {
            logError("signIn", e)
        }
    }

    function getNowPlaying() {
        try {
            execDS.connectSource("qdbus org.mooheda.gpd /org/mooheda/gpd org.mooheda.gpd.GetNowPlaying")
        } catch (e) {
            logError("getNowPlaying", e)
        }
    }

    Component.onCompleted: {
        console.log("GlobalPlayer v" + widgetVersion + " starting on " + plasmaVersionDetected)
        refreshStations()
        getNowPlaying()
    }

    Timer {
        interval: 3000
        running: true
        repeat: true
        onTriggered: {
            try {
                getNowPlaying()
            } catch (e) {
                logError("Timer.onTriggered", e)
            }
        }
    }

    PlasmaCore.DataSource {
        id: execDS
        engine: "executable"

        onNewData: function(sourceName, data) {
            try {
                var out = (data["stdout"] || "").trim()
                var err = (data["stderr"] || "").trim()

                if (err) {
                    console.log("Command error:", err)
                }

                if (sourceName.indexOf("GetNowPlaying") !== -1) {
                    try {
                        var m = JSON.parse(out)
                        var newArtist = m.artist || ""
                        var newTitle = m.title || ""
                        var newShow = m.show || ""
                        var newState = m.state || playState
                        var newArtworkPath = m.artworkPath || ""

                        var newTrackId = newArtist + "|" + newTitle
                        var trackChanged = (newTrackId !== lastNotifiedTrack) && newTrackId !== "|" && newState === "Playing"

                        nowArtist = newArtist
                        nowTitle = newTitle
                        nowShow = newShow
                        playState = newState

                        if (newArtworkPath) {
                            artworkUrl = "file://" + newArtworkPath
                        } else {
                            artworkUrl = ""
                        }

                        if (trackChanged && pushNotifications) {
                            sendTrackNotification()
                        }

                        lastNotifiedTrack = newTrackId
                    } catch (e) {
                        logError("JSON.parse(GetNowPlaying)", e)
                    }
                } else if (sourceName.indexOf("GetStations") !== -1) {
                    try {
                        var stations = JSON.parse(out)
                        stationsModel = stations || []
                        
                        if (selectedStation) {
                            var idx = stationsModel.indexOf(selectedStation)
                            if (idx !== -1) {
                                stationIndex = idx
                            }
                        }
                    } catch (e) {
                        logError("JSON.parse(GetStations)", e)
                    }
                }

                disconnectSource(sourceName)
            } catch (e) {
                logError("execDS.onNewData", e)
            }
        }
    }

    Plasmoid.compactRepresentation: Item {
        Layout.preferredWidth: PlasmaCore.Units.gridUnit * 2
        Layout.preferredHeight: PlasmaCore.Units.gridUnit * 2

        Rectangle {
            anchors.fill: parent
            anchors.margins: 2
            radius: PlasmaCore.Units.smallSpacing
            border.color: PlasmaCore.Theme.textColor
            border.width: 1
            color: "transparent"

            Image {
                anchors.fill: parent
                anchors.margins: 2
                fillMode: Image.PreserveAspectFit
                source: artworkUrl
                visible: artworkUrl !== ""
            }

            PC3.Label {
                anchors.centerIn: parent
                text: "♪"
                opacity: 0.4
                font.pointSize: PlasmaCore.Theme.defaultFont.pointSize * 2
                visible: artworkUrl === ""
            }

            Rectangle {
                anchors.bottom: parent.bottom
                anchors.right: parent.right
                width: PlasmaCore.Units.smallSpacing
                height: PlasmaCore.Units.smallSpacing
                radius: width / 2
                color: isPlaying ? PlasmaCore.Theme.positiveTextColor : PlasmaCore.Theme.neutralTextColor
                opacity: 0.8
            }
        }

        MouseArea {
            anchors.fill: parent
            acceptedButtons: Qt.LeftButton | Qt.RightButton
            
            onClicked: function(mouse) {
                try {
                    if (mouse.button === Qt.LeftButton) {
                        plasmoid.expanded = !plasmoid.expanded
                    } else if (mouse.button === Qt.RightButton) {
                        nextStation()
                    }
                } catch (e) {
                    logError("MouseArea.onClicked", e)
                }
            }

            onWheel: function(wheel) {
                try {
                    if (wheel.angleDelta.y > 0) {
                        prevStation()
                    } else {
                        nextStation()
                    }
                    wheel.accepted = true
                } catch (e) {
                    logError("MouseArea.onWheel", e)
                }
            }
        }
    }

    Plasmoid.fullRepresentation: Item {
        id: fullRoot
        
        Layout.preferredWidth: PlasmaCore.Units.gridUnit * 20
        Layout.preferredHeight: PlasmaCore.Units.gridUnit * 25

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: PlasmaCore.Units.largeSpacing
            spacing: PlasmaCore.Units.largeSpacing

            RowLayout {
                Layout.fillWidth: true
                
                PC3.Label {
                    text: "Global Player v" + widgetVersion
                    font.bold: true
                    font.pointSize: PlasmaCore.Theme.defaultFont.pointSize * 1.2
                    Layout.fillWidth: true
                }
                
                PC3.Button {
                    text: "Sign In"
                    onClicked: signIn()
                }
            }

            RowLayout {
                Layout.fillWidth: true
                spacing: PlasmaCore.Units.largeSpacing

                Rectangle {
                    Layout.preferredWidth: PlasmaCore.Units.gridUnit * 5
                    Layout.preferredHeight: PlasmaCore.Units.gridUnit * 5
                    radius: PlasmaCore.Units.smallSpacing
                    border.color: PlasmaCore.Theme.textColor
                    border.width: 1
                    color: PlasmaCore.Theme.backgroundColor

                    Image {
                        anchors.fill: parent
                        anchors.margins: 4
                        fillMode: Image.PreserveAspectFit
                        source: artworkUrl
                        visible: artworkUrl !== ""
                    }

                    PC3.Label {
                        anchors.centerIn: parent
                        text: "♪"
                        opacity: 0.4
                        font.pointSize: PlasmaCore.Theme.defaultFont.pointSize * 3
                        visible: artworkUrl === ""
                    }
                }

                ColumnLayout {
                    Layout.fillWidth: true
                    spacing: PlasmaCore.Units.smallSpacing

                    PC3.Label {
                        Layout.fillWidth: true
                        text: displayTitle
                        wrapMode: Text.WordWrap
                        font.weight: Font.Medium
                        font.pointSize: PlasmaCore.Theme.defaultFont.pointSize * 1.1
                        maximumLineCount: 2
                        elide: Text.ElideRight
                    }

                    PC3.Label {
                        Layout.fillWidth: true
                        text: nowShow ? ("Show: " + nowShow) : ""
                        wrapMode: Text.WordWrap
                        opacity: 0.8
                        visible: nowShow !== ""
                    }

                    PC3.Label {
                        Layout.fillWidth: true
                        text: "Status: " + playState + " (" + plasmaVersionDetected + ")"
                        opacity: 0.7
                        font.pointSize: PlasmaCore.Theme.smallFont.pointSize
                    }
                }
            }

            PC3.ComboBox {
                id: stationPicker
                Layout.fillWidth: true
                model: stationsModel
                currentIndex: stationIndex
                onActivated: {
                    try {
                        stationIndex = currentIndex
                        playCurrent()
                    } catch (e) {
                        logError("ComboBox.onActivated", e)
                    }
                }
            }

            RowLayout {
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter
                spacing: PlasmaCore.Units.largeSpacing

                PC3.Button {
                    text: "◀"
                    onClicked: prevStation()
                    enabled: stationsModel.length > 1
                }

                PC3.Button {
                    text: isPlaying ? "◼" : "▶"
                    font.pointSize: PlasmaCore.Theme.defaultFont.pointSize * 1.5
                    onClicked: togglePlayPause()
                    Layout.preferredWidth: PlasmaCore.Units.gridUnit * 3
                }

                PC3.Button {
                    text: "▶"
                    onClicked: nextStation()
                    enabled: stationsModel.length > 1
                }
            }

            ColumnLayout {
                Layout.fillWidth: true
                spacing: PlasmaCore.Units.smallSpacing

                PC3.CheckBox {
                    text: "Enable logging to ~/globalplayer/gp.logs"
                    checked: loggingEnabled
                    onToggled: qdbusCall("SetLogging", [checked ? "true" : "false"])
                }

                PC3.CheckBox {
                    text: "Push notifications for track changes"
                    checked: pushNotifications
                    onToggled: {
                        try {
                            pushNotifications = checked
                            qdbusCall("SetNotifications", [checked ? "true" : "false"])
                        } catch (e) {
                            logError("Notifications.onToggled", e)
                        }
                    }
                }
            }

            RowLayout {
                Layout.fillWidth: true

                Item {
                    Layout.fillWidth: true
                }

                PC3.Button {
                    text: "↻"
                    onClicked: refreshStations()
                    PC3.ToolTip.text: "Refresh station list"
                }
            }

            Item {
                Layout.fillHeight: true
            }
        }
    }
}